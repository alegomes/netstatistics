#!/bin/bash
# 
# netstatistics collects statistics network data in CSV format for latter analysis.
# Copyright (C) 2012 Alexandre Gomes

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Author: Alexandre Gomes (alegomes at Google Public Mail)
#
# Changelog:
# v0.1 (05/15/2012) - First release


ORIGINAL_CMDS=$@

LOG_FOLDER="/var/log/netstatistics"
HEADER="timestamp;mac address;ssid;signal strength;noise;server tested;packet loss (%);round-trip min (ms);round-trip avg (ms);round-trip max (ms);round-trip std dev (ms);"

function usage {
  echo 
  echo "netstatistics collects statistics network data in CSV format."
  echo "Generated files can be reached at /var/log/netstatistics"
  echo 
  echo "Usage:"
  echo
  echo "$ netstatistics start|stop [server_address1] [server_address2] ..."
  echo
  echo "  if no server address is specified, 3 addresses will be used to statistics:"
  echo
  echo "    1. default gateway (e.g. 10.1.1.1)"
  echo "    2. primary DNS (/etc/resolv.conf)"
  echo "    3. Google DNS Server (8.8.8.8)"
  echo
  exit 
}


function check_for_required_commands {
	for reqcmd in wget; do
	  if [[ -z "$(which $reqcmd)" ]]
	  then
	    echo
	    echo "ERROR: Missing required '$reqcmd' command."
	    echo
	    exit 1
	  fi
	done
}

function check_for_update {
	# Inspired by https://github.com/pmalves/ctools-installer
	rm -rf .tmp
	mkdir -p .tmp/dist

	wget --no-check-certificate 'https://raw.github.com/alegomes/netstatistics/master/netstatistics' -P .tmp -o /dev/null

	if ! diff $0 .tmp/netstatistics >/dev/null ; then
	  answer="n"
	  echo
	  echo -n "There a new netstatistics version available. Do you want to upgrade? (y/N) "
	  read -e answer

	  case $answer in
		 [Yy]* ) cp .tmp/netstatistics $0; echo "Upgrade successful. Rerunning command '$0 $ORIGINAL_CMDS'"; /bin/bash $0 $ORIGINAL_CMDS; exit 0;;
	  esac

	fi
}

function check_log_folder {
  USERNAME=$(whoami)

  if [ ! -d $LOG_FOLDER ]; then
	if [ ! -w ${LOG_FOLDER%/*} ]; then
		echo "Sudo password required to create ${LOG_FOLDER}"
    	sudo mkdir $LOG_FOLDER
        sudo chmod a+w $LOG_FOLDER
		echo "$LOG_FOLDER created successfully"
	fi
  else
    if [ ! -w $LOG_FOLDER ]; then
		echo "Sudo password required to give write permission to $USERNAME in $LOG_FOLDER"
        sudo chmod a+w $LOG_FOLDER
		echo "Write permission successfully set on $LOG_FOLDER"
	fi
  fi
}

function run_ping {
  IP=$1
  PING_LOG_FILE=".ping.${IP}"

  rm ${PING_LOG_FILE} 2> /dev/null
  ping -t 60 $IP > ${PING_LOG_FILE}

  REGEX="^.*packets\ transmitted.*packets\ received,\ (.*)%\ packet\ loss.*round-trip\ min/avg/max/stddev\ =\ (.*)/(.*)/(.*)/(.*)\ ms" 
  [[ $(cat $PING_LOG_FILE) =~ $REGEX ]]

  PACKET_LOSS="${BASH_REMATCH[1]}"
  ROUND_TRIP_MIN="${BASH_REMATCH[2]}"
  ROUND_TRIP_AVG="${BASH_REMATCH[3]}"
  ROUND_TRIP_MAX="${BASH_REMATCH[4]}"
  ROUND_TRIP_STDDEV="${BASH_REMATCH[5]}"

  PING_LOG="${PACKET_LOSS};${ROUND_TRIP_MIN};${ROUND_TRIP_AVG};${ROUND_TRIP_MAX};${ROUND_TRIP_STDDEV};"
}

function collect_data {

  SERVER_ADDRESS=$1

  while(true); do
    # Outras formas de pegar o SSID:
    # /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}'
    # system_profiler SPAirPortDataType | awk -F':' '/Current Network Information:/ {getline; print $1}'
    SSID=$(networksetup -getairportnetwork en1 | sed -e 's/^.*: //g')

    LOG_FILE="$LOG_FOLDER/netstatistics-$(date +%Y%m%d).csv"

	if [ -z $LOG_FILE ]; then
		echo $HEADER
	fi

    TIMESTAMP=$(date +"%d/%m/%Y;%H:%M")
	MAC=$(ifconfig en1 | grep ether | awk '{print $2}')
	SIGNAL_STRENGHT=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep CtlRSSI | sed -e 's/^.*: //g')
	SIGNAL_NOISE=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I  | grep -i agrCtlNoise | sed -e 's/^.*: //g')
	
    run_ping $SERVER_ADDRESS
    METRICS="${TIMESTAMP};${MAC};${SSID};${SIGNAL_STRENGHT};${SIGNAL_NOISE};${SERVER_ADDRESS};${PING_LOG}"

	echo $METRICS >> $LOG_FILE
  done
}

function execute_recursion {

	declare -a SERVERS
	if [ $# -eq 1 ]; then
		DEFAULT_GATEWAY=$(netstat -nr | grep '^default' | awk '{print $2}')
		PRIMARY_DNS=$(cat /etc/resolv.conf | grep nameserver | head -1 | awk '{print $2}')
		GOOGLE_DNS="8.8.8.8"
		
		SERVERS=($DEFAULT_GATEWAY $PRIMARY_DNS $GOOGLE_DNS)
	else 
		if [ $# -gt 1 ]; then
			i=0
			shift # Ignore first argument (start)
			while test $# -gt 0; do
				SERVERS[$i]=$1
				(( i = i + 1 ))
				shift
			done
		fi
	fi
	
	for ADDRESS in ${SERVERS[*]}; do
		CMD="/bin/bash $0 start $ADDRESS"
		echo "Calling $CMD"
		$CMD
	done
	
}

function execute_script {
  check_for_required_commands
  check_for_update
  check_log_folder
  echo "Collected data available at $LOG_FOLDER"
  (collect_data $1 &)&
}

function start {
  case $# in
	2) 
	  execute_script $2
	  ;;
	*) 
	  execute_recursion $@
  esac
}

function stop {
  PID=$(ps aux | grep "$0 start" | grep -v grep | awk '{ print $2 }')

  if [ -z $PID ]; then
	echo "netstatistics not running..."
	exit -1
  fi

  echo "Killing process ${PID}..."
  kill $PID
  exit
}

function status {
  ps aux | grep -i netstat | grep -v grep | grep -v tail | grep -v status
}

###############
# BEGIN
###############

[ $# -gt 0 ] || usage

trap "stop" HUP
trap "stop" INT
trap "stop" QUIT
trap "stop" PIPE
trap "stop" TERM
trap "stop" KILL

case $1 in
  start )
	start $@ ;;
  stop )
    stop ;;
  status )
    status ;;
  * )
    usage ;;
esac
