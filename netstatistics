#!/bin/bash

ORIGINAL_CMDS=$@

LOG_FOLDER="/var/log/netstatistics"
SERVER_DEFAULT="8.8.8.8" # Google DNS
HEADER="timestamp;ssid;signal strength;noise;server tested;packet loss (%);round-trip min (ms);round-trip avg (ms);round-trip max (ms);round-trip std dev (ms);"

function usage {
  echo 
  echo "netstatistics collects statistics network data in CSV format."
  echo "Generated files can be reached at /var/log/netstatistics"
  echo 
  echo "Usage:"
  echo
  echo "$ netstatistics start|stop [server_address]"
  echo
  echo "  if no server address is specified, Google DNS Server will be used."
  echo
  exit 
}

function check_for_required_commands {
	for reqcmd in wget; do
	  if [[ -z "$(which $reqcmd)" ]]
	  then
	    echo "ERROR: Missing required '$reqcmd' command."
	    exit 1
	  fi
	done
}

function check_for_update {
	# Inspired by https://github.com/pmalves/ctools-installer
	rm -rf .tmp
	mkdir -p .tmp/dist

	wget --no-check-certificate 'https://raw.github.com/alegomes/netstatistics/master/netstatistics' -P .tmp -o /dev/null

	if ! diff $0 .tmp/netstatistics >/dev/null ; then
	  answer="n"
	  echo
	  echo -n "There a new netstatistics version available. Do you want to upgrade? (y/N) "
	  read -e answer

	  case $answer in
		 [Yy]* ) cp .tmp/netstatistics $0; echo "Upgrade successful. Rerunning command '$0 $ORIGINAL_CMDS'"; /bin/bash $0 $ORIGINAL_CMDS; exit 0;;
	  esac

	fi
}

function check_log_folder {
  USERNAME=$(whoami)

  if [ ! -d $LOG_FOLDER ]; then
	if [ ! -w ${LOG_FOLDER%/*} ]; then
		echo "Sudo password required to create ${LOG_FOLDER}"
    	sudo mkdir $LOG_FOLDER
        sudo chmod a+w $LOG_FOLDER
	fi
  else
    if [ ! -w $LOG_FOLDER ]; then
		echo "Sudo password required to give write permission to $USERNAME in $LOG_FOLDER"
        sudo chmod a+w $LOG_FOLDER
	fi
  fi
}

function run_ping {
  PING_LOG_FILE=".ping"
  IP=$1

  rm ${PING_LOG_FILE} 2> /dev/null
  ping -t 60 $IP > ${PING_LOG_FILE}

  REGEX="^.*packets\ transmitted.*packets\ received,\ (.*)%\ packet\ loss.*round-trip\ min/avg/max/stddev\ =\ (.*)/(.*)/(.*)/(.*)\ ms" 
  [[ $(cat $PING_LOG_FILE) =~ $REGEX ]]

  PACKET_LOSS="${BASH_REMATCH[1]}"
  ROUND_TRIP_MIN="${BASH_REMATCH[2]}"
  ROUND_TRIP_AVG="${BASH_REMATCH[3]}"
  ROUND_TRIP_MAX="${BASH_REMATCH[4]}"
  ROUND_TRIP_STDDEV="${BASH_REMATCH[5]}"

  PING_LOG="${PACKET_LOSS};${ROUND_TRIP_MIN};${ROUND_TRIP_AVG};${ROUND_TRIP_MAX};${ROUND_TRIP_STDDEV};"
}

function collect_data() {
  while(true); do

    # Outras formas de pegar o SSID:
    # /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}'
    # system_profiler SPAirPortDataType | awk -F':' '/Current Network Information:/ {getline; print $1}'
    SSID=$(networksetup -getairportnetwork en1 | cut -c 24-)

    LOG_FILE="$LOG_FOLDER/netstatistics-$(date +%Y%m%d).csv"

	if [ -z $LOG_FILE ]; then
		echo $HEADER
	fi

    TIMESTAMP=$(date +"%d/%m/%Y;%H:%M")
	SIGNAL_STRENGHT=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep CtlRSSI | sed -e 's/^.*: //g')
	SIGNAL_NOISE=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I  | grep -i agrCtlNoise | sed -e 's/^.*: //g')
	
    run_ping $SERVER_ADDRESS
    METRICS="${TIMESTAMP};${SSID};${SIGNAL_STRENGHT};${SIGNAL_NOISE};${SERVER_ADDRESS};${PING_LOG}"

	echo $METRICS >> $LOG_FILE
  done
}

function start {
  if [ -z $1 ]; then
	SERVER_ADDRESS=$SERVER_DEFAULT
  fi
}

function stop {
  PID=$(ps aux | grep "bash ./netstatistics start" | grep -v grep | awk '{ print $2 }')

  if [ -z $PID ]; then
	echo "netstatistics not running..."
	exit -1
  fi

  echo "Finalizando processo ${PID}..."
  kill $PID
  exit
}


###############
# BEGIN
###############

[ $# -gt 0 ] || usage

case $1 in
  start )
	start ;;
  stop )
    stop ;;
esac

trap "stop" HUP
trap "stop" INT
trap "stop" QUIT
trap "stop" PIPE
trap "stop" TERM
trap "stop" KILL

check_for_required_commands
check_for_update
check_log_folder
(collect_data &)&
