#!/bin/bash
# 
# netstatistics collects statistics network data in CSV format for latter analysis.
# Copyright (C) 2012 Alexandre Gomes

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Author: Alexandre Gomes (alegomes at Google Public Mail)
#
# Changelog:
# v0.1 (05/15/2012) - First release


ORIGINAL_CMDS=$@

LOG_FOLDER="/var/log/netstatistics"
HEADER="timestamp;mac address;kernel;ssid;signal strength;noise;server tested;packet loss (%);round-trip min (ms);round-trip avg (ms);round-trip max (ms);round-trip std dev (ms);"
PING_WINDOW=60

function usage {
  echo 
  echo "netstatistics collects statistics network data in CSV format."
  echo "Generated files can be reached at /var/log/netstatistics"
  echo 
  echo "Usage:"
  echo
  echo "$ netstatistics start|stop|status "
  echo
  exit 
}


function check_for_required_commands {
	for reqcmd in wget; do
	  if [[ -z "$(which $reqcmd)" ]]
	  then
	    echo
	    echo "ERROR: Missing required '$reqcmd' command."
	    echo
	    exit 1
	  fi
	done
}

function check_for_update {
	# Inspired by https://github.com/pmalves/ctools-installer
	rm -rf .tmp
	mkdir -p .tmp/dist

	wget --no-check-certificate 'https://raw.github.com/alegomes/netstatistics/master/netstatistics' -P .tmp -o /dev/null

	if ! diff $0 .tmp/netstatistics >/dev/null ; then
	  answer="n"
	  echo
	  echo -n "There a new netstatistics version available. Do you want to upgrade? (y/N) "
	  read -e answer

	  case $answer in
		 [Yy]* ) cp .tmp/netstatistics $0; echo "Upgrade successful. Rerunning command '$0 $ORIGINAL_CMDS'"; /bin/bash $0 $ORIGINAL_CMDS; exit 0;;
	  esac

	fi
}

function check_log_folder {
  USERNAME=$(whoami)

  if [ ! -d $LOG_FOLDER ]; then
	if [ ! -w ${LOG_FOLDER%/*} ]; then
		echo "Sudo password required to create ${LOG_FOLDER}"
    	sudo mkdir $LOG_FOLDER
        sudo chmod a+w $LOG_FOLDER
		echo "$LOG_FOLDER created successfully"
	fi
  else
    if [ ! -w $LOG_FOLDER ]; then
		echo "Sudo password required to give write permission to $USERNAME in $LOG_FOLDER"
        sudo chmod a+w $LOG_FOLDER
		echo "Write permission successfully set on $LOG_FOLDER"
	fi
  fi
}

function run_ping {
  IP=$1
  PING_LOG_FILE=".ping.${IP}"

  rm ${PING_LOG_FILE} 2> /dev/null
  ping -t $PING_WINDOW $IP &> ${PING_LOG_FILE}

  REGEX1="^.*packets\ transmitted.*packets\ received,\ (.*)%\ packet\ loss.*"
  [[ $(cat $PING_LOG_FILE) =~ $REGEX1 ]]

  PACKET_LOSS="${BASH_REMATCH[1]}"

  REGEX2="round-trip\ min/avg/max/stddev\ =\ (.*)/(.*)/(.*)/(.*)\ ms" 
  [[ $(cat $PING_LOG_FILE) =~ $REGEX2 ]]

  ROUND_TRIP_MIN="${BASH_REMATCH[1]}"
  ROUND_TRIP_AVG="${BASH_REMATCH[2]}"
  ROUND_TRIP_MAX="${BASH_REMATCH[3]}"
  ROUND_TRIP_STDDEV="${BASH_REMATCH[4]}"

  #[[ -z $PACKET_LOSS ]] && PACKET_LOSS="100.0"

  echo "${PACKET_LOSS};${ROUND_TRIP_MIN};${ROUND_TRIP_AVG};${ROUND_TRIP_MAX};${ROUND_TRIP_STDDEV};"
}

function collect_data {

	# Log file
	
	LOG_FILE="$LOG_FOLDER/netstatistics-$(date +%Y%m%d).csv"
	if [ -z $LOG_FILE ]; then
		echo $HEADER
	fi
	
	# Servers
	
	DEFAULT_GATEWAY=$(netstat -nr | grep '^default' | awk '{print $2}')
	PRIMARY_DNS=$(cat /etc/resolv.conf | grep nameserver | head -1 | awk '{print $2}')
	GOOGLE_DNS="8.8.8.8"
	SERVERS=($DEFAULT_GATEWAY $PRIMARY_DNS $GOOGLE_DNS)

	# Metrics
	
	# Outras formas de pegar o SSID:
	# /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}'
	# system_profiler SPAirPortDataType | awk -F':' '/Current Network Information:/ {getline; print $1}'
	SSID=$(networksetup -getairportnetwork en1 | sed -e 's/^.*: //g')
	TIMESTAMP=$(date +"%d/%m/%Y;%H:%M")
	MAC=$(ifconfig en1 | grep ether | awk '{print $2}')
	KERNEL_VERSION=$(uname -r)
	SIGNAL_STRENGHT=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep CtlRSSI | sed -e 's/^.*: //g')
	SIGNAL_NOISE=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I  | grep -i agrCtlNoise | sed -e 's/^.*: //g')

#	for ADDRESS in ${SERVERS[*]}; do
	DEFAULT_GATEWAY_METRICS="/bin/bash $0 ping $DEFAULT_GATEWAY"
	#echo "Calling [$DEFAULT_GATEWAY_METRICS]"
	echo "${TIMESTAMP};${MAC};${KERNEL_VERSION};${SSID};${SIGNAL_STRENGHT};${SIGNAL_NOISE};${DEFAULT_GATEWAY};$($DEFAULT_GATEWAY_METRICS)" >> $LOG_FILE &
	
	PRIMARY_DNS_METRICS="/bin/bash $0 ping $PRIMARY_DNS"
	#echo "Calling [$PRIMARY_DNS_METRICS]"
	echo "${TIMESTAMP};${MAC};${KERNEL_VERSION};${SSID};${SIGNAL_STRENGHT};${SIGNAL_NOISE};${PRIMARY_DNS};$($PRIMARY_DNS_METRICS)" >> $LOG_FILE &

	GOOGLE_DNS_METRICS="/bin/bash $0 ping $GOOGLE_DNS"
	#echo "Calling [$GOOGLE_DNS_METRICS]"
	echo "${TIMESTAMP};${MAC};${KERNEL_VERSION};${SSID};${SIGNAL_STRENGHT};${SIGNAL_NOISE};${GOOGLE_DNS};$($GOOGLE_DNS_METRICS)" >> $LOG_FILE &

#	done
}


function start {

  check_for_required_commands
  check_for_update
  check_log_folder
  echo "Collected data available at $LOG_FOLDER"

  while(true); do
  	(collect_data &)&

	let WAIT_TIME=($PING_WINDOW * 2 )
	sleep $WAIT_TIME
  done

}

function stop {
  PIDS=$(ps aux | grep bash | grep "$0" | grep -v grep | awk '{ print $2 }')

  if [ -z "$PIDS" ]; then
	echo "netstatistics not running..."
	exit -1
  fi

  for PID in $PIDS; do
	  echo "Killing process ${PID}..."
	  kill $PID
  done
  exit
}

function status {
  ps aux | grep -i netstat | grep -v grep | grep -v tail | grep -v status
}

###############
# BEGIN
###############

[ $# -gt 0 ] || usage

trap "stop" HUP
trap "stop" INT
trap "stop" QUIT
trap "stop" PIPE
trap "stop" TERM
trap "stop" KILL

case $1 in
  start )
	start
	;;
  stop )
    stop
	;;
  status )
    status
	;;
  ping )
	run_ping $2
	;;
  * )
    usage
	;;
esac
